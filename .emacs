(add-to-list 'load-path "~/.elisp")
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(package-initialize)
(require 'package)
(require 'tramp)
(require 'uniquify)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(delete-selection-mode 1)
 '(make-backup-files t)
 '(package-archives
   '(("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa-stable" . "http://stable.melpa.org/packages/")))
 '(package-selected-packages '())
 '(prefer-coding-system 'utf-8)
 '(recentf-mode 1)
 '(save-place-mode 1)
 '(scroll-bar-mode 'left)
 '(set-keyboard-coding-system 'utf-8)
 '(set-terminal-coding-system 'utf-8)
 '(show-paren-mode t)
 '(show-trailing-whitespace t)
 '(size-indication-mode t)
 '(standard-indent 2)
 '(tab-always-indent nil))

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(defconst query-replace-highlight t)
(defconst search-highlight t)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq-default indicate-empty-lines t)
(setq-default line-number-mode t)
(setq-default column-number-mode t)
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t)
(setq initial-scratch-message "")
(setq ecb-tip-of-the-day nil)
(setq show-paren-delay 0)
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
(setq default-major-mode 'text-mode)
(setq tramp-default-method "scp")
(setq make-backup-files nil)
(setq version-control 'never)
(setq transient-mark-mode t)
(setq visible-bell t)
(setq scroll-step 1)
(setq truncate-partial-width-windows nil)
(setq next-line-add-newlines nil)
(setq show-trailing-whitespace t)
(setq tab-width 2)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)

(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
(put 'downcase-region 'disabled nil)
(global-set-key (kbd "s-<down>") 'shrink-window)
(global-set-key (kbd "s-<up>") 'enlarge-window)
(global-set-key (kbd "C-c") 'undefined)
(global-set-key (kbd "C-z") 'undefined)
(global-set-key (kbd "C-c") 'kill-ring-save)
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-z") 'undo)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-r" '(lambda ()
        (interactive) (load-file "~/.emacs")))
(add-hook 'python-mode-hook '(lambda ()
                               (setq indent-python 2)))
(add-hook 'after-init-hook (lambda ()
           (load-theme 'wombat t)
           (kill-buffer "*scratch*")))
(add-hook 'isearch-update-post-hook 'redraw-display)
(custom-set-faces )

(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))
(when window-system (set-exec-path-from-shell-PATH))
